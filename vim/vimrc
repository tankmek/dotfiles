" =========================
" @tankmek Production vimrc
"
" Dependencies:
"   - Vim compiled with +python3 support
"   - Vim-Plug
"   - Powerline (via pipx or pip)
"
" Install:
"   1. curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"   2. pipx install powerline-status
"   3. mkdir -p ~/.vim/{plugged,cache,colors}
"   4. Launch Vim and run :PlugInstall
"

" ===================================
" Core Settings
" ===================================
set nocompatible
filetype plugin indent on
syntax on

set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
set history=1000
set scrolloff=5
set visualbell noerrorbells
set updatetime=100
set ttyfast
set modeline
set secure

set shiftwidth=4
set tabstop=4
set softtabstop=4
set expandtab
set preserveindent
set autoindent
set nosmartindent
set fo=tcrq
set ignorecase smartcase
set splitbelow splitright
set hlsearch incsearch
set showmatch
set nowrap
set linebreak
set list
set listchars=tab:→\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set showbreak=↪
set title
set relativenumber
set cursorline
set laststatus=2
set noshowmode
set ruler
set t_Co=256
set background=dark

if has("termguicolors")
  set termguicolors
endif

" Mouse support
if has("mouse")
  set mouse=a
  set mousemodel=popup
  set selectmode+=mouse
endif

let mapleader = ","

" Tmux + TrueColor fix
if empty($TMUX)
  if exists('$NVIM_TUI_ENABLE_TRUE_COLOR')
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
endif

" ===================================
" Plugin Manager
" ===================================
call plug#begin('~/.vim/plugged')

Plug 'powerline/powerline'
Plug 'unblevable/quick-scope'
Plug 'romainl/vim-cool'
Plug 'tpope/vim-surround'
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'mhinz/vim-startify'
Plug 'sheerun/vim-polyglot'

call plug#end()

" ===================================
" Colorscheme / Appearance
" ===================================
" Dynamically fix background and comment colors
if has("autocmd") && !has("gui_running")
  augroup colorscheme_overrides
    autocmd!
    autocmd ColorScheme * call s:apply_colorscheme_fixes()
  augroup END

  function! s:apply_colorscheme_fixes() abort
    if g:colors_name ==# 'gruvbox'
      highlight Normal ctermfg=223 guifg=#ebdbb2 ctermbg=NONE guibg=NONE
      highlight Comment cterm=italic gui=italic guifg=#928374 ctermfg=244
    elseif g:colors_name ==# 'onedark'
      if exists('*onedark#set_highlight')
        let s:onedark_fg_color = { "gui": "#ABB2BF", "cterm": "145", "cterm16": "7" }
        call onedark#set_highlight("Normal", { "fg": s:onedark_fg_color })
        highlight Comment cterm=italic gui=italic guifg=#5C6370 ctermfg=243
      else
        highlight Normal guifg=#ABB2BF ctermfg=145 guibg=NONE ctermbg=NONE
        highlight Comment cterm=italic gui=italic guifg=#5C6370 ctermfg=243
      endif
    endif
  endfunction
endif

" Set your default theme
colorscheme gruvbox

" Powerline Statusline
let g:Powerline_symbols = 'fancy'
set rtp+=~/.vim/plugged/powerline/powerline/bindings/vim
set statusline=%!powerline#statusline#render()

" ===================================
" Persistent Undo / Backup / Swap
" ===================================
set backup
set swapfile
set undofile

set backupdir=~/.vim/cache/backup//
set directory=~/.vim/cache/swap//
set undodir=~/.vim/cache/undo//
set viminfofile=~/.vim/cache/.viminfo

" Auto-create necessary directories
for dir in [&undodir, &backupdir, &directory]
  if !isdirectory(expand(dir))
    call mkdir(expand(dir), "p")
  endif
endfor

" ===================================
" Autocommands
" ===================================

" Restore cursor to last position
augroup JumpCursorOnEdit
  autocmd!
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   execute "normal! g`\"" |
    \ endif
augroup END

" Filetype-specific indent settings
augroup filetype_settings
  autocmd!

  autocmd FileType * setlocal shiftwidth=4 softtabstop=4 expandtab

  autocmd FileType python setlocal shiftwidth=4 softtabstop=4 expandtab autoindent
  autocmd FileType javascript,typescript,json,css,scss,html,vue,jsx,tsx setlocal shiftwidth=2 softtabstop=2 expandtab autoindent
  autocmd FileType yaml,ruby setlocal shiftwidth=2 softtabstop=2 expandtab autoindent
  autocmd FileType go setlocal shiftwidth=8 softtabstop=8 noexpandtab autoindent
  autocmd FileType make setlocal shiftwidth=8 softtabstop=8 noexpandtab
  autocmd FileType sh,bash,zsh setlocal shiftwidth=4 softtabstop=4 expandtab autoindent
  autocmd FileType markdown setlocal wrap spell shiftwidth=2 softtabstop=2 expandtab
  autocmd FileType gitcommit setlocal wrap textwidth=72 spell
augroup END

" Highlight cursorline differently based on background
function! UpdateCursorLineHighlight()
  if &background == "dark"
    highlight CursorLine cterm=NONE ctermbg=236 ctermfg=NONE guibg=#2c2f33 guifg=NONE
  else
    highlight CursorLine cterm=NONE ctermbg=254 ctermfg=NONE guibg=#dcdcdc guifg=NONE
  endif
endfunction
autocmd VimEnter * call UpdateCursorLineHighlight()

" Quick mappings
nnoremap <Leader>ln :set relativenumber!<CR>
nnoremap <Leader>p :set paste!<CR>
